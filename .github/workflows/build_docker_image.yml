name: Build Docker Image

on:
  release:
    types: [published]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: registry.hub.docker.com    
  DOCKER_IMAGE: philosowaffle/peloton-to-garmin    
  DOCKERUSERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKERPASS: ${{ secrets.DOCKER_PASSWORD }}  
  DOCKER_TARGET_PLATFORM: linux/arm/v7

jobs:
  push_to_registry:
    name: Push Docker image to GitHub Packages
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Push to GitHub Packages
        uses: docker/build-push-action@v1
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: docker.pkg.github.com
          repository: philosowaffle/peloton-to-garmin/peloton-to-garmin
          tag_with_ref: true
      - name: Push to Docker Hub
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: philosowaffle/peloton-to-garmin
          tag_with_ref: true
      - name: Checkout nginx-opentracing master
        uses: actions/checkout@v2.3.4
        with:
          repository: opentracing-contrib/nginx-opentracing
          ref: master
      - name: Set up Docker Buildx      
        uses: crazy-max/ghaction-docker-buildx@v1      
        with:        
          version: latest
      - name: Prepare Args      
        if: success()      
        id: prepare      
        run: |        
          echo ::set-output name=docker_platform::${DOCKER_TARGET_PLATFORM}        
          echo ::set-output name=docker_image::${DOCKER_REGISTRY}/${DOCKER_IMAGE}        
          echo ::set-output name=version::latest
      - name: Docker Login      
        if: success()      
        run: |        
          echo "${DOCKER_PASSWORD}" | docker login ${DOCKER_REGISTRY} --username "${DOCKER_USERNAME}" --password-stdin
      - name: Create armv7 Image    
        if: success()
        run: |        
          docker buildx build --platform ${{ steps.prepare.outputs.docker_platform }} --tag ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }} --file $GITHUB_WORKSPACE/Dockerfile --push .
